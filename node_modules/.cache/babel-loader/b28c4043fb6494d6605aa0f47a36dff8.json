{"ast":null,"code":"var _jsxFileName = \"/Users/volodymyr/Desktop/react-may-2020/src/components/app/App.js\";\nimport React from 'react';\nimport { Header } from '../header/HeaderFromLecture';\nimport { Footer } from '../footer/Footer';\nimport TestCard, { PostCard as Card } from '../post-card/PostCard'; // todo: достать в строке 7 массив allComments из констант\n\nimport { allComments, user } from '../../constants';\nimport { postsList, usersList } from '../../constants'; // todo помимо константы postsList достать еще usersList\n// todo: тут сделать импорт  UserCard из components/user-card/UserCard\n\nimport { UserCard } from \"../user-card/UserCard\";\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const renderList = () => {\n    const res = [];\n\n    for (let i = 0; i < 6; i++) {\n      const item = postsList[i];\n      res.push( /*#__PURE__*/React.createElement(Card, {\n        post: item,\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 22\n        }\n      }));\n    }\n\n    return res;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, \"content will appear here soon\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex posts-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, postsList.map((item, index) => {\n    const odd = index % 2 !== 0; // todo: найти в массиве usersList пользователя, айди которого равно user_id в посте (т.е. в данном случае item)\n    //  для этого можно использовать функцию массива find или findIndex\n    //  передать имя и фамилию пользователя как пропсу author в Card\n    //  использовать для этого стринговый литерал ``\n    //  в Card под телом поста срендерить имя автора, используя blockquote-footer класс из бутстрапа\n    //  пример тут: https://hackerthemes.com/bootstrap-cheatsheet/#blockquote-footer\n\n    const {\n      first_name,\n      last_name\n    } = usersList.find(user => user.id = item.user_id); // todo: найти в массиве allComments комментарии, post_id которых = id поста  (т.е. в данном случае item.id)\n    //  для этого можно использовать метод массива filter\n    //  передать этот массив в Card как пропсу под названиес comments\n\n    const comments = allComments.find(comment => comment.post_id = item.id);\n    console.log(comments);\n    return /*#__PURE__*/React.createElement(Card, {\n      post: item,\n      key: item.id,\n      hasImage: odd,\n      comments: comments,\n      author: `${last_name} ${first_name}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 32\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex posts-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/volodymyr/Desktop/react-may-2020/src/components/app/App.js"],"names":["React","Header","Footer","TestCard","PostCard","Card","allComments","user","postsList","usersList","UserCard","App","renderList","res","i","item","push","id","map","index","odd","first_name","last_name","find","user_id","comments","comment","post_id","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,MAAR,QAAqB,6BAArB;AACA,SAAQC,MAAR,QAAqB,kBAArB;AACA,OAAOC,QAAP,IAAkBC,QAAQ,IAAIC,IAA9B,QAAyC,uBAAzC,C,CACA;;AACA,SAAQC,WAAR,EAAqBC,IAArB,QAAgC,iBAAhC;AACA,SAAQC,SAAR,EAAmBC,SAAnB,QAAmC,iBAAnC,C,CAAsD;AACtD;;AACA,SAAQC,QAAR,QAAuB,uBAAvB;AACA,OAAO,YAAP;AACA,OAAO,sCAAP;;AAEA,SAASC,GAAT,GAAe;AAEX,QAAMC,UAAU,GAAG,MAAM;AACrB,UAAMC,GAAG,GAAG,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,YAAMC,IAAI,GAAGP,SAAS,CAACM,CAAD,CAAtB;AACAD,MAAAA,GAAG,CAACG,IAAJ,eAAS,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAED,IAAZ;AAAkB,QAAA,GAAG,EAAEA,IAAI,CAACE,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAT;AACH;;AAED,WAAOJ,GAAP;AACH,GATD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFJ,eAUI;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQL,SAAS,CAACU,GAAV,CAAc,CAACH,IAAD,EAAOI,KAAP,KAAiB;AAC3B,UAAMC,GAAG,GAAGD,KAAK,GAAG,CAAR,KAAc,CAA1B,CAD2B,CAE3B;AACA;AACA;AACA;AACA;AACA;;AACA,UAAM;AAACE,MAAAA,UAAD;AAAaC,MAAAA;AAAb,QAA0Bb,SAAS,CAACc,IAAV,CAAehB,IAAI,IAAIA,IAAI,CAACU,EAAL,GAAUF,IAAI,CAACS,OAAtC,CAAhC,CAR2B,CAU3B;AACA;AACA;;AACA,UAAMC,QAAQ,GAAGnB,WAAW,CAACiB,IAAZ,CAAiBG,OAAO,IAAIA,OAAO,CAACC,OAAR,GAAkBZ,IAAI,CAACE,EAAnD,CAAjB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAEA,wBAAO,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEV,IAAZ;AAAkB,MAAA,GAAG,EAAEA,IAAI,CAACE,EAA5B;AAAgC,MAAA,QAAQ,EAAEG,GAA1C;AAA+C,MAAA,QAAQ,EAAEK,QAAzD;AACM,MAAA,MAAM,EAAG,GAAEH,SAAU,IAAGD,UAAW,EADzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEH,GAlBD,CAFR,CAVJ,eAkCI;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCJ,eAsCI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtCJ,CADJ;AA0CH;;AAED,eAAeV,GAAf","sourcesContent":["import React from 'react';\n\nimport {Header} from '../header/HeaderFromLecture';\nimport {Footer} from '../footer/Footer';\nimport TestCard, {PostCard as Card} from '../post-card/PostCard';\n// todo: достать в строке 7 массив allComments из констант\nimport {allComments, user} from '../../constants';\nimport {postsList, usersList} from '../../constants'; // todo помимо константы postsList достать еще usersList\n// todo: тут сделать импорт  UserCard из components/user-card/UserCard\nimport {UserCard} from \"../user-card/UserCard\";\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n\n    const renderList = () => {\n        const res = [];\n\n        for (let i = 0; i < 6; i++) {\n            const item = postsList[i];\n            res.push(<Card post={item} key={item.id}/>)\n        }\n\n        return res;\n    };\n\n    return (\n        <div className=\"App\">\n            <Header/>\n            <div>content will appear here soon</div>\n\n            {/*<div className=\"d-flex posts-container\">*/}\n            {/*  {*/}\n            {/*    renderList()*/}\n            {/*  }*/}\n            {/*</div>*/}\n\n            <div className=\"d-flex posts-container\">\n                {\n                    postsList.map((item, index) => {\n                        const odd = index % 2 !== 0;\n                        // todo: найти в массиве usersList пользователя, айди которого равно user_id в посте (т.е. в данном случае item)\n                        //  для этого можно использовать функцию массива find или findIndex\n                        //  передать имя и фамилию пользователя как пропсу author в Card\n                        //  использовать для этого стринговый литерал ``\n                        //  в Card под телом поста срендерить имя автора, используя blockquote-footer класс из бутстрапа\n                        //  пример тут: https://hackerthemes.com/bootstrap-cheatsheet/#blockquote-footer\n                        const {first_name, last_name} = usersList.find(user => user.id = item.user_id);\n\n                        // todo: найти в массиве allComments комментарии, post_id которых = id поста  (т.е. в данном случае item.id)\n                        //  для этого можно использовать метод массива filter\n                        //  передать этот массив в Card как пропсу под названиес comments\n                        const comments = allComments.find(comment => comment.post_id = item.id);\n                        console.log(comments)\n\n                        return <Card post={item} key={item.id} hasImage={odd} comments={comments}\n                                     author={`${last_name} ${first_name}`}/>\n                    })\n                }\n            </div>\n\n            <div className=\"d-flex posts-container\">\n                  {/*todo: срендерить тут список пользователей, используя компонент UserCard*/}\n            </div>\n\n            <Footer/>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}